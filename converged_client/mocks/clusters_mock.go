// Code generated by MockGen. DO NOT EDIT.
// Source: converged_client/clusters.go
//
// Generated by this command:
//
//	mockgen -source=converged_client/clusters.go -destination=converged_client/mocks/clusters_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	convergedclient "github.com/nutanix-cloud-native/prism-go-client/converged_client"
	gomock "go.uber.org/mock/gomock"
)

// MockClusters is a mock of Clusters interface.
type MockClusters[Cluster any, VirtualGpuProfile any, PhysicalGpuProfile any] struct {
	ctrl     *gomock.Controller
	recorder *MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile]
	isgomock struct{}
}

// MockClustersMockRecorder is the mock recorder for MockClusters.
type MockClustersMockRecorder[Cluster any, VirtualGpuProfile any, PhysicalGpuProfile any] struct {
	mock *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]
}

// NewMockClusters creates a new mock instance.
func NewMockClusters[Cluster any, VirtualGpuProfile any, PhysicalGpuProfile any](ctrl *gomock.Controller) *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile] {
	mock := &MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]{ctrl: ctrl}
	mock.recorder = &MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) EXPECT() *MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile] {
	return m.recorder
}

// Get mocks base method.
func (m *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) Get(ctx context.Context, uuid string) (*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uuid)
	ret0, _ := ret[0].(*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) Get(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile])(nil).Get), ctx, uuid)
}

// List mocks base method.
func (m *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) List(ctx context.Context, opts ...convergedclient.ODataOption) ([]Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile])(nil).List), varargs...)
}

// ListAll mocks base method.
func (m *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) ListAll(ctx context.Context, opts ...convergedclient.ODataOption) ([]Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAll", varargs...)
	ret0, _ := ret[0].([]Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) ListAll(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile])(nil).ListAll), varargs...)
}

// ListClusterPhysicalGPUs mocks base method.
func (m *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) ListClusterPhysicalGPUs(ctx context.Context, clusterUuid string, opts ...convergedclient.ODataOption) ([]PhysicalGpuProfile, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterUuid}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterPhysicalGPUs", varargs...)
	ret0, _ := ret[0].([]PhysicalGpuProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterPhysicalGPUs indicates an expected call of ListClusterPhysicalGPUs.
func (mr *MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) ListClusterPhysicalGPUs(ctx, clusterUuid any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterUuid}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterPhysicalGPUs", reflect.TypeOf((*MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile])(nil).ListClusterPhysicalGPUs), varargs...)
}

// ListClusterVirtualGPUs mocks base method.
func (m *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) ListClusterVirtualGPUs(ctx context.Context, clusterUuid string, opts ...convergedclient.ODataOption) ([]VirtualGpuProfile, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterUuid}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterVirtualGPUs", varargs...)
	ret0, _ := ret[0].([]VirtualGpuProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterVirtualGPUs indicates an expected call of ListClusterVirtualGPUs.
func (mr *MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) ListClusterVirtualGPUs(ctx, clusterUuid any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterUuid}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterVirtualGPUs", reflect.TypeOf((*MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile])(nil).ListClusterVirtualGPUs), varargs...)
}

// NewIterator mocks base method.
func (m *MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) NewIterator(opts ...convergedclient.ODataOption) convergedclient.Iterator[Cluster] {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewIterator", varargs...)
	ret0, _ := ret[0].(convergedclient.Iterator[Cluster])
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockClustersMockRecorder[Cluster, VirtualGpuProfile, PhysicalGpuProfile]) NewIterator(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockClusters[Cluster, VirtualGpuProfile, PhysicalGpuProfile])(nil).NewIterator), opts...)
}
