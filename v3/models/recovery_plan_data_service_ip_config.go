// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryPlanDataServiceIPConfig Data Service IP to be configured on the VM.
//
// Information about Data Service IP to be configured on the VM during Volume Group attachment.
//
// swagger:model recovery_plan_data_service_ip_config
type RecoveryPlanDataServiceIPConfig struct {

	// URL of the Availability Zone.
	// Required: true
	AvailabilityZoneURL *string `json:"availability_zone_url"`

	// Reference to Cluster where the data service IPs are hosted.
	//
	// Required: true
	ClusterReference *ClusterReference `json:"cluster_reference"`

	// Data Services IP address to be reconfigured in VM during Planned and Unplanned Failover.
	//
	// Required: true
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	RecoveryDataServiceIP *string `json:"recovery_data_service_ip"`

	// Data Services IP address to be reconfigured in VM during Test Failover.
	//
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	TestDataServiceIP string `json:"test_data_service_ip,omitempty"`
}

// Validate validates this recovery plan data service ip config
func (m *RecoveryPlanDataServiceIPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZoneURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryDataServiceIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestDataServiceIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanDataServiceIPConfig) validateAvailabilityZoneURL(formats strfmt.Registry) error {

	if err := validate.Required("availability_zone_url", "body", m.AvailabilityZoneURL); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanDataServiceIPConfig) validateClusterReference(formats strfmt.Registry) error {

	if err := validate.Required("cluster_reference", "body", m.ClusterReference); err != nil {
		return err
	}

	if m.ClusterReference != nil {
		if err := m.ClusterReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_reference")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanDataServiceIPConfig) validateRecoveryDataServiceIP(formats strfmt.Registry) error {

	if err := validate.Required("recovery_data_service_ip", "body", m.RecoveryDataServiceIP); err != nil {
		return err
	}

	if err := validate.Pattern("recovery_data_service_ip", "body", *m.RecoveryDataServiceIP, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanDataServiceIPConfig) validateTestDataServiceIP(formats strfmt.Registry) error {
	if swag.IsZero(m.TestDataServiceIP) { // not required
		return nil
	}

	if err := validate.Pattern("test_data_service_ip", "body", m.TestDataServiceIP, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recovery plan data service ip config based on the context it is used
func (m *RecoveryPlanDataServiceIPConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanDataServiceIPConfig) contextValidateClusterReference(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterReference != nil {

		if err := m.ClusterReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanDataServiceIPConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanDataServiceIPConfig) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanDataServiceIPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
