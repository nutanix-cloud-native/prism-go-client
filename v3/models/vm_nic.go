// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMNic Virtual Machine NIC
//
// Virtual Machine NIC.
//
// swagger:model vm_nic
type VMNic struct {

	// IP endpoints for the adapter. Currently, IPv4 addresses are
	// supported.
	//
	IPEndpointList []*IPAddress `json:"ip_endpoint_list"`

	// Whether or not the NIC is connected. True by default.
	IsConnected bool `json:"is_connected,omitempty"`

	// The MAC address for the adapter.
	// Pattern: ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
	MacAddress string `json:"mac_address,omitempty"`

	// The model of this NIC.
	Model string `json:"model,omitempty"`

	// network function chain reference
	NetworkFunctionChainReference *NetworkFunctionChainReference `json:"network_function_chain_reference,omitempty"`

	// The type of this Network function NIC. Defaults to INGRESS.
	//
	NetworkFunctionNicType string `json:"network_function_nic_type,omitempty"`

	// The type of this NIC. Defaults to NORMAL_NIC.
	NicType string `json:"nic_type,omitempty"`

	// The number of tx/rx queue pairs for this NIC.
	//
	NumQueues int64 `json:"num_queues,omitempty"`

	// Secondary IPv4 Addresses for this NIC.
	// Max Items: 100
	SecondaryIPAddressList []string `json:"secondary_ip_address_list"`

	// subnet reference
	SubnetReference *SubnetReference `json:"subnet_reference,omitempty"`

	// List of networks to trunk if vlan_mode is TRUNKED. If empty and VLAN mode is TRUNKED, all VLANs are trunked.
	//
	TrunkedVlanList []int64 `json:"trunked_vlan_list"`

	// The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
	//
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	UUID string `json:"uuid,omitempty"`

	// By default, all virtual NICs are created in ACCESS mode, which permits only one VLAN per virtual network. TRUNKED mode allows multiple VLANs on a single VM NIC for network-aware user VMs.
	//
	VlanMode string `json:"vlan_mode,omitempty"`
}

// Validate validates this vm nic
func (m *VMNic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPEndpointList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkFunctionChainReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryIPAddressList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNic) validateIPEndpointList(formats strfmt.Registry) error {
	if swag.IsZero(m.IPEndpointList) { // not required
		return nil
	}

	for i := 0; i < len(m.IPEndpointList); i++ {
		if swag.IsZero(m.IPEndpointList[i]) { // not required
			continue
		}

		if m.IPEndpointList[i] != nil {
			if err := m.IPEndpointList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_endpoint_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ip_endpoint_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMNic) validateMacAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.MacAddress) { // not required
		return nil
	}

	if err := validate.Pattern("mac_address", "body", m.MacAddress, `^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$`); err != nil {
		return err
	}

	return nil
}

func (m *VMNic) validateNetworkFunctionChainReference(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkFunctionChainReference) { // not required
		return nil
	}

	if m.NetworkFunctionChainReference != nil {
		if err := m.NetworkFunctionChainReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_function_chain_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_function_chain_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMNic) validateSecondaryIPAddressList(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryIPAddressList) { // not required
		return nil
	}

	iSecondaryIPAddressListSize := int64(len(m.SecondaryIPAddressList))

	if err := validate.MaxItems("secondary_ip_address_list", "body", iSecondaryIPAddressListSize, 100); err != nil {
		return err
	}

	for i := 0; i < len(m.SecondaryIPAddressList); i++ {

		if err := validate.Pattern("secondary_ip_address_list"+"."+strconv.Itoa(i), "body", m.SecondaryIPAddressList[i], `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *VMNic) validateSubnetReference(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetReference) { // not required
		return nil
	}

	if m.SubnetReference != nil {
		if err := m.SubnetReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMNic) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.Pattern("uuid", "body", m.UUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vm nic based on the context it is used
func (m *VMNic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPEndpointList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkFunctionChainReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNic) contextValidateIPEndpointList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPEndpointList); i++ {

		if m.IPEndpointList[i] != nil {

			if swag.IsZero(m.IPEndpointList[i]) { // not required
				return nil
			}

			if err := m.IPEndpointList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_endpoint_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ip_endpoint_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMNic) contextValidateNetworkFunctionChainReference(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkFunctionChainReference != nil {

		if swag.IsZero(m.NetworkFunctionChainReference) { // not required
			return nil
		}

		if err := m.NetworkFunctionChainReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_function_chain_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_function_chain_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMNic) contextValidateSubnetReference(ctx context.Context, formats strfmt.Registry) error {

	if m.SubnetReference != nil {

		if swag.IsZero(m.SubnetReference) { // not required
			return nil
		}

		if err := m.SubnetReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMNic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMNic) UnmarshalBinary(b []byte) error {
	var res VMNic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
