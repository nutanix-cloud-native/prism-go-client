// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSoftware Cluster software
//
// Cluster software.
//
// swagger:model cluster_software
type ClusterSoftware struct {

	// software type
	// Required: true
	SoftwareType *SoftwareType `json:"software_type"`

	// Current software status.
	Status *string `json:"status,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this cluster software
func (m *ClusterSoftware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSoftwareType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSoftware) validateSoftwareType(formats strfmt.Registry) error {

	if err := validate.Required("software_type", "body", m.SoftwareType); err != nil {
		return err
	}

	if err := validate.Required("software_type", "body", m.SoftwareType); err != nil {
		return err
	}

	if m.SoftwareType != nil {
		if err := m.SoftwareType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_type")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSoftware) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cluster software based on the context it is used
func (m *ClusterSoftware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSoftwareType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSoftware) contextValidateSoftwareType(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareType != nil {

		if err := m.SoftwareType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSoftware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSoftware) UnmarshalBinary(b []byte) error {
	var res ClusterSoftware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
