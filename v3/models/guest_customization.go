// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GuestCustomization Guest Customization Configuration for creation/modification request
//
// VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if "override_script" is set to "True" then the deployer can upload their own custom script.
//
// swagger:model guest_customization
type GuestCustomization struct {

	// cloud init
	CloudInit *GuestCustomizationCloudInit `json:"cloud_init,omitempty"`

	// Flag to allow override of customization by deployer.
	IsOverridable *bool `json:"is_overridable,omitempty"`

	// sysprep
	Sysprep *GuestCustomizationSysprep `json:"sysprep,omitempty"`

	// guest customization
	GuestCustomization map[string]string `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GuestCustomization) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// cloud init
		CloudInit *GuestCustomizationCloudInit `json:"cloud_init,omitempty"`

		// Flag to allow override of customization by deployer.
		IsOverridable *bool `json:"is_overridable,omitempty"`

		// sysprep
		Sysprep *GuestCustomizationSysprep `json:"sysprep,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GuestCustomization

	rcv.CloudInit = stage1.CloudInit
	rcv.IsOverridable = stage1.IsOverridable
	rcv.Sysprep = stage1.Sysprep
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "cloud_init")
	delete(stage2, "is_overridable")
	delete(stage2, "sysprep")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]string)
		for k, v := range stage2 {
			var toadd string
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GuestCustomization = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GuestCustomization) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// cloud init
		CloudInit *GuestCustomizationCloudInit `json:"cloud_init,omitempty"`

		// Flag to allow override of customization by deployer.
		IsOverridable *bool `json:"is_overridable,omitempty"`

		// sysprep
		Sysprep *GuestCustomizationSysprep `json:"sysprep,omitempty"`
	}

	stage1.CloudInit = m.CloudInit
	stage1.IsOverridable = m.IsOverridable
	stage1.Sysprep = m.Sysprep

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GuestCustomization) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GuestCustomization)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this guest customization
func (m *GuestCustomization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudInit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSysprep(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestCustomization) validateCloudInit(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudInit) { // not required
		return nil
	}

	if m.CloudInit != nil {
		if err := m.CloudInit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_init")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_init")
			}
			return err
		}
	}

	return nil
}

func (m *GuestCustomization) validateSysprep(formats strfmt.Registry) error {
	if swag.IsZero(m.Sysprep) { // not required
		return nil
	}

	if m.Sysprep != nil {
		if err := m.Sysprep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sysprep")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sysprep")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this guest customization based on the context it is used
func (m *GuestCustomization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudInit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSysprep(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestCustomization) contextValidateCloudInit(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudInit != nil {

		if swag.IsZero(m.CloudInit) { // not required
			return nil
		}

		if err := m.CloudInit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_init")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_init")
			}
			return err
		}
	}

	return nil
}

func (m *GuestCustomization) contextValidateSysprep(ctx context.Context, formats strfmt.Registry) error {

	if m.Sysprep != nil {

		if swag.IsZero(m.Sysprep) { // not required
			return nil
		}

		if err := m.Sysprep.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sysprep")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sysprep")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GuestCustomization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GuestCustomization) UnmarshalBinary(b []byte) error {
	var res GuestCustomization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GuestCustomizationCloudInit If this field is set, the guest will be customized using cloud-init. Either user_data or custom_key_values should be provided. If custom_key_ves are provided then the user data will be generated using these key-value pairs.
//
// swagger:model GuestCustomizationCloudInit
type GuestCustomizationCloudInit struct {

	// custom key values
	CustomKeyValues CustomGenericKeyValuePair `json:"custom_key_values,omitempty"`

	// The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
	//
	// Max Length: 32000
	MetaData string `json:"meta_data,omitempty"`

	// The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
	//
	// Max Length: 128000
	UserData string `json:"user_data,omitempty"`
}

// Validate validates this guest customization cloud init
func (m *GuestCustomizationCloudInit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomKeyValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestCustomizationCloudInit) validateCustomKeyValues(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomKeyValues) { // not required
		return nil
	}

	if m.CustomKeyValues != nil {
		if err := m.CustomKeyValues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_init" + "." + "custom_key_values")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_init" + "." + "custom_key_values")
			}
			return err
		}
	}

	return nil
}

func (m *GuestCustomizationCloudInit) validateMetaData(formats strfmt.Registry) error {
	if swag.IsZero(m.MetaData) { // not required
		return nil
	}

	if err := validate.MaxLength("cloud_init"+"."+"meta_data", "body", m.MetaData, 32000); err != nil {
		return err
	}

	return nil
}

func (m *GuestCustomizationCloudInit) validateUserData(formats strfmt.Registry) error {
	if swag.IsZero(m.UserData) { // not required
		return nil
	}

	if err := validate.MaxLength("cloud_init"+"."+"user_data", "body", m.UserData, 128000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this guest customization cloud init based on the context it is used
func (m *GuestCustomizationCloudInit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomKeyValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestCustomizationCloudInit) contextValidateCustomKeyValues(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CustomKeyValues) { // not required
		return nil
	}

	if err := m.CustomKeyValues.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cloud_init" + "." + "custom_key_values")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cloud_init" + "." + "custom_key_values")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GuestCustomizationCloudInit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GuestCustomizationCloudInit) UnmarshalBinary(b []byte) error {
	var res GuestCustomizationCloudInit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GuestCustomizationSysprep If this field is set, the guest will be customized using Sysprep. Either unattend_xml or custom_key_values should be provided. If custom_key_values are provided then the unattended answer file will be generated using these key-value pairs.
//
// swagger:model GuestCustomizationSysprep
type GuestCustomizationSysprep struct {

	// custom key values
	CustomKeyValues CustomGenericKeyValuePair `json:"custom_key_values,omitempty"`

	// Whether the guest will be freshly installed using this unattend configuration, or whether this unattend configuration will be applied to a pre-prepared image. Default is "PREPARED".
	//
	InstallType *string `json:"install_type,omitempty"`

	// This field contains a Sysprep unattend xml definition, as a string. The value must be base64 encoded.
	//
	// Max Length: 32000
	UnattendXML string `json:"unattend_xml,omitempty"`
}

// Validate validates this guest customization sysprep
func (m *GuestCustomizationSysprep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomKeyValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnattendXML(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestCustomizationSysprep) validateCustomKeyValues(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomKeyValues) { // not required
		return nil
	}

	if m.CustomKeyValues != nil {
		if err := m.CustomKeyValues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sysprep" + "." + "custom_key_values")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sysprep" + "." + "custom_key_values")
			}
			return err
		}
	}

	return nil
}

func (m *GuestCustomizationSysprep) validateUnattendXML(formats strfmt.Registry) error {
	if swag.IsZero(m.UnattendXML) { // not required
		return nil
	}

	if err := validate.MaxLength("sysprep"+"."+"unattend_xml", "body", m.UnattendXML, 32000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this guest customization sysprep based on the context it is used
func (m *GuestCustomizationSysprep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomKeyValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestCustomizationSysprep) contextValidateCustomKeyValues(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CustomKeyValues) { // not required
		return nil
	}

	if err := m.CustomKeyValues.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sysprep" + "." + "custom_key_values")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sysprep" + "." + "custom_key_values")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GuestCustomizationSysprep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GuestCustomizationSysprep) UnmarshalBinary(b []byte) error {
	var res GuestCustomizationSysprep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
