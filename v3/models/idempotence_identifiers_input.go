// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdempotenceIdentifiersInput Idempotence object
//
// Resources for the idempotence identifier kind.
//
// swagger:model idempotence_identifiers_input
type IdempotenceIdentifiersInput struct {

	// The client identifier string.
	ClientIdentifier string `json:"client_identifier,omitempty"`

	// The number of idempotence identifiers provided.
	// Required: true
	// Maximum: 4096
	// Minimum: 1
	Count *int64 `json:"count"`

	// Number of minutes from creation time for which idempotence identifier uuid list is valid.
	// Maximum: 527040
	// Minimum: 1
	ValidDurationInMinutes int64 `json:"valid_duration_in_minutes,omitempty"`
}

// Validate validates this idempotence identifiers input
func (m *IdempotenceIdentifiersInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidDurationInMinutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdempotenceIdentifiersInput) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("count", "body", *m.Count, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("count", "body", *m.Count, 4096, false); err != nil {
		return err
	}

	return nil
}

func (m *IdempotenceIdentifiersInput) validateValidDurationInMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidDurationInMinutes) { // not required
		return nil
	}

	if err := validate.MinimumInt("valid_duration_in_minutes", "body", m.ValidDurationInMinutes, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("valid_duration_in_minutes", "body", m.ValidDurationInMinutes, 527040, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this idempotence identifiers input based on context it is used
func (m *IdempotenceIdentifiersInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IdempotenceIdentifiersInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdempotenceIdentifiersInput) UnmarshalBinary(b []byte) error {
	var res IdempotenceIdentifiersInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
