// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdempotenceIdentifiersStatus Response Kind
//
// The status of a REST API call. Only used when there is a failure to
// report.
//
// swagger:model idempotence_identifiers_status
type IdempotenceIdentifiersStatus struct {

	// api version
	APIVersion APIVersion `json:"api_version,omitempty"`

	// The HTTP error code.
	// Read Only: true
	Code int64 `json:"code,omitempty"`

	// The kind name
	// Read Only: true
	Kind string `json:"kind,omitempty"`

	// message list
	// Read Only: true
	MessageList []*MessageResource `json:"message_list"`

	// state
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this idempotence identifiers status
func (m *IdempotenceIdentifiersStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdempotenceIdentifiersStatus) validateAPIVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.APIVersion) { // not required
		return nil
	}

	if err := m.APIVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("api_version")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("api_version")
		}
		return err
	}

	return nil
}

func (m *IdempotenceIdentifiersStatus) validateMessageList(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageList) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageList); i++ {
		if swag.IsZero(m.MessageList[i]) { // not required
			continue
		}

		if m.MessageList[i] != nil {
			if err := m.MessageList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this idempotence identifiers status based on the context it is used
func (m *IdempotenceIdentifiersStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdempotenceIdentifiersStatus) contextValidateAPIVersion(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.APIVersion) { // not required
		return nil
	}

	if err := m.APIVersion.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("api_version")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("api_version")
		}
		return err
	}

	return nil
}

func (m *IdempotenceIdentifiersStatus) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "code", "body", int64(m.Code)); err != nil {
		return err
	}

	return nil
}

func (m *IdempotenceIdentifiersStatus) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "kind", "body", string(m.Kind)); err != nil {
		return err
	}

	return nil
}

func (m *IdempotenceIdentifiersStatus) contextValidateMessageList(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message_list", "body", []*MessageResource(m.MessageList)); err != nil {
		return err
	}

	for i := 0; i < len(m.MessageList); i++ {

		if m.MessageList[i] != nil {

			if swag.IsZero(m.MessageList[i]) { // not required
				return nil
			}

			if err := m.MessageList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdempotenceIdentifiersStatus) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdempotenceIdentifiersStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdempotenceIdentifiersStatus) UnmarshalBinary(b []byte) error {
	var res IdempotenceIdentifiersStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
