// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryPlanDefStatus Recovery Plan status
//
// # Recovery Plan status
//
// swagger:model recovery_plan_def_status
type RecoveryPlanDefStatus struct {

	// A description or user annotation for the Recovery Plan.
	Description string `json:"description,omitempty"`

	// Time when latest test was done for Recovery Plan.
	// Format: date-time
	LatestTestTime strfmt.DateTime `json:"latest_test_time,omitempty"`

	// Time when latest validation was done for Recovery Plan.
	// Format: date-time
	LatestValidationTime strfmt.DateTime `json:"latest_validation_time,omitempty"`

	// message list
	MessageList []*MessageResource `json:"message_list"`

	// Recovery Plan name
	// Required: true
	Name *string `json:"name"`

	// List of recovery Availability Zones order list. Each unique Availability Zone order list will be reported. A cluster might also be specified for each Availability Zone in the Availability Zones order list, in case the entity is protected for replication to/from a cluster in the Protection Policy.
	//
	// Required: true
	RecoveryAvailabilityZoneOrderList []*RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0 `json:"recovery_availability_zone_order_list"`

	// resources
	// Required: true
	Resources *RecoveryPlanResources `json:"resources"`

	// The state of the Recovery Plan entity.
	State string `json:"state,omitempty"`
}

// Validate validates this recovery plan def status
func (m *RecoveryPlanDefStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatestTestTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestValidationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryAvailabilityZoneOrderList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanDefStatus) validateLatestTestTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestTestTime) { // not required
		return nil
	}

	if err := validate.FormatOf("latest_test_time", "body", "date-time", m.LatestTestTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanDefStatus) validateLatestValidationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestValidationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("latest_validation_time", "body", "date-time", m.LatestValidationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanDefStatus) validateMessageList(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageList) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageList); i++ {
		if swag.IsZero(m.MessageList[i]) { // not required
			continue
		}

		if m.MessageList[i] != nil {
			if err := m.MessageList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoveryPlanDefStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanDefStatus) validateRecoveryAvailabilityZoneOrderList(formats strfmt.Registry) error {

	if err := validate.Required("recovery_availability_zone_order_list", "body", m.RecoveryAvailabilityZoneOrderList); err != nil {
		return err
	}

	for i := 0; i < len(m.RecoveryAvailabilityZoneOrderList); i++ {
		if swag.IsZero(m.RecoveryAvailabilityZoneOrderList[i]) { // not required
			continue
		}

		if m.RecoveryAvailabilityZoneOrderList[i] != nil {
			if err := m.RecoveryAvailabilityZoneOrderList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recovery_availability_zone_order_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recovery_availability_zone_order_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoveryPlanDefStatus) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recovery plan def status based on the context it is used
func (m *RecoveryPlanDefStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryAvailabilityZoneOrderList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanDefStatus) contextValidateMessageList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MessageList); i++ {

		if m.MessageList[i] != nil {

			if swag.IsZero(m.MessageList[i]) { // not required
				return nil
			}

			if err := m.MessageList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoveryPlanDefStatus) contextValidateRecoveryAvailabilityZoneOrderList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecoveryAvailabilityZoneOrderList); i++ {

		if m.RecoveryAvailabilityZoneOrderList[i] != nil {

			if swag.IsZero(m.RecoveryAvailabilityZoneOrderList[i]) { // not required
				return nil
			}

			if err := m.RecoveryAvailabilityZoneOrderList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recovery_availability_zone_order_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recovery_availability_zone_order_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoveryPlanDefStatus) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanDefStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanDefStatus) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanDefStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0 recovery plan def status recovery availability zone order list items0
//
// swagger:model RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0
type RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0 struct {

	// List of recovery Availability Zone orders for entities in the Recovery Plan. More than one entry in this list indicates entities in Recovery Plan are protected by the Protection Rules with different recovery Availability Zone order and makes Recovery Plan invalid.
	//
	AvailabilityZoneOrderList [][]*RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0 `json:"availability_zone_order_list"`

	// URL of the Availability Zone.
	//
	// Required: true
	AvailabilityZoneURL *string `json:"availability_zone_url"`
}

// Validate validates this recovery plan def status recovery availability zone order list items0
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZoneOrderList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilityZoneURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0) validateAvailabilityZoneOrderList(formats strfmt.Registry) error {
	return nil
}

func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0) validateAvailabilityZoneURL(formats strfmt.Registry) error {

	if err := validate.Required("availability_zone_url", "body", m.AvailabilityZoneURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recovery plan def status recovery availability zone order list items0 based on the context it is used
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilityZoneOrderList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0) contextValidateAvailabilityZoneOrderList(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0 recovery plan def status recovery availability zone order list items0 availability zone order list items0
//
// swagger:model RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0
type RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0 struct {

	// List of Availability Zones.
	AvailabilityZoneList []*RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0 `json:"availability_zone_list"`
}

// Validate validates this recovery plan def status recovery availability zone order list items0 availability zone order list items0
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZoneList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0) validateAvailabilityZoneList(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilityZoneList) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailabilityZoneList); i++ {
		if swag.IsZero(m.AvailabilityZoneList[i]) { // not required
			continue
		}

		if m.AvailabilityZoneList[i] != nil {
			if err := m.AvailabilityZoneList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availability_zone_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("availability_zone_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this recovery plan def status recovery availability zone order list items0 availability zone order list items0 based on the context it is used
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilityZoneList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0) contextValidateAvailabilityZoneList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AvailabilityZoneList); i++ {

		if m.AvailabilityZoneList[i] != nil {

			if swag.IsZero(m.AvailabilityZoneList[i]) { // not required
				return nil
			}

			if err := m.AvailabilityZoneList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availability_zone_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("availability_zone_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0 recovery plan def status recovery availability zone order list items0 availability zone order list items0 availability zone list items0
//
// swagger:model RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0
type RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0 struct {

	// URL of the Availability Zone.
	//
	AvailabilityZoneURL string `json:"availability_zone_url,omitempty"`

	// UUID of the cluster.
	//
	Cluster string `json:"cluster,omitempty"`
}

// Validate validates this recovery plan def status recovery availability zone order list items0 availability zone order list items0 availability zone list items0
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this recovery plan def status recovery availability zone order list items0 availability zone order list items0 availability zone list items0 based on context it is used
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanDefStatusRecoveryAvailabilityZoneOrderListItems0AvailabilityZoneOrderListItems0AvailabilityZoneListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
