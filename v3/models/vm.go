// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VM vm Intent Spec with placement specified
//
// # An intentful representation of a vm spec
//
// swagger:model vm
type VM struct {

	// availability zone reference
	AvailabilityZoneReference *AvailabilityZoneReference `json:"availability_zone_reference,omitempty"`

	// cluster reference
	ClusterReference *ClusterReference `json:"cluster_reference,omitempty"`

	// A description for vm.
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// vm Name.
	// Required: true
	// Max Length: 256
	Name *string `json:"name"`

	// resources
	// Required: true
	Resources *VMResources `json:"resources"`
}

// Validate validates this vm
func (m *VM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZoneReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VM) validateAvailabilityZoneReference(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilityZoneReference) { // not required
		return nil
	}

	if m.AvailabilityZoneReference != nil {
		if err := m.AvailabilityZoneReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability_zone_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availability_zone_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VM) validateClusterReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterReference) { // not required
		return nil
	}

	if m.ClusterReference != nil {
		if err := m.ClusterReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VM) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (m *VM) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 256); err != nil {
		return err
	}

	return nil
}

func (m *VM) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vm based on the context it is used
func (m *VM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilityZoneReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VM) contextValidateAvailabilityZoneReference(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailabilityZoneReference != nil {

		if swag.IsZero(m.AvailabilityZoneReference) { // not required
			return nil
		}

		if err := m.AvailabilityZoneReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability_zone_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availability_zone_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VM) contextValidateClusterReference(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterReference != nil {

		if swag.IsZero(m.ClusterReference) { // not required
			return nil
		}

		if err := m.ClusterReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VM) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VM) UnmarshalBinary(b []byte) error {
	var res VM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
