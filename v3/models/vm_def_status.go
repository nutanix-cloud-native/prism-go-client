// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMDefStatus vm Intent Status with placement specified
//
// # An intentful representation of a vm status
//
// swagger:model vm_def_status
type VMDefStatus struct {

	// availability zone reference
	AvailabilityZoneReference *AvailabilityZoneReference `json:"availability_zone_reference,omitempty"`

	// cluster reference
	ClusterReference *ClusterReference `json:"cluster_reference,omitempty"`

	// A description for vm.
	Description string `json:"description,omitempty"`

	// execution context
	ExecutionContext *VMDefStatusExecutionContext `json:"execution_context,omitempty"`

	// Any error messages for the vm, if in an error state.
	MessageList []*MessageResource `json:"message_list"`

	// vm Name.
	// Required: true
	Name *string `json:"name"`

	// resources
	// Required: true
	Resources *VMResourcesDefStatus `json:"resources"`

	// The state of the vm.
	State string `json:"state,omitempty"`
}

// Validate validates this vm def status
func (m *VMDefStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZoneReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDefStatus) validateAvailabilityZoneReference(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilityZoneReference) { // not required
		return nil
	}

	if m.AvailabilityZoneReference != nil {
		if err := m.AvailabilityZoneReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability_zone_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availability_zone_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMDefStatus) validateClusterReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterReference) { // not required
		return nil
	}

	if m.ClusterReference != nil {
		if err := m.ClusterReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMDefStatus) validateExecutionContext(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionContext) { // not required
		return nil
	}

	if m.ExecutionContext != nil {
		if err := m.ExecutionContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execution_context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execution_context")
			}
			return err
		}
	}

	return nil
}

func (m *VMDefStatus) validateMessageList(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageList) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageList); i++ {
		if swag.IsZero(m.MessageList[i]) { // not required
			continue
		}

		if m.MessageList[i] != nil {
			if err := m.MessageList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDefStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VMDefStatus) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vm def status based on the context it is used
func (m *VMDefStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilityZoneReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutionContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDefStatus) contextValidateAvailabilityZoneReference(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailabilityZoneReference != nil {

		if swag.IsZero(m.AvailabilityZoneReference) { // not required
			return nil
		}

		if err := m.AvailabilityZoneReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability_zone_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availability_zone_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMDefStatus) contextValidateClusterReference(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterReference != nil {

		if swag.IsZero(m.ClusterReference) { // not required
			return nil
		}

		if err := m.ClusterReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMDefStatus) contextValidateExecutionContext(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecutionContext != nil {

		if swag.IsZero(m.ExecutionContext) { // not required
			return nil
		}

		if err := m.ExecutionContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execution_context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execution_context")
			}
			return err
		}
	}

	return nil
}

func (m *VMDefStatus) contextValidateMessageList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MessageList); i++ {

		if m.MessageList[i] != nil {

			if swag.IsZero(m.MessageList[i]) { // not required
				return nil
			}

			if err := m.MessageList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDefStatus) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDefStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDefStatus) UnmarshalBinary(b []byte) error {
	var res VMDefStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMDefStatusExecutionContext VM def status execution context
//
// swagger:model VMDefStatusExecutionContext
type VMDefStatusExecutionContext struct {

	// uuid or a list of uuids
	TaskUUID interface{} `json:"task_uuid,omitempty"`
}

// Validate validates this VM def status execution context
func (m *VMDefStatusExecutionContext) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this VM def status execution context based on context it is used
func (m *VMDefStatusExecutionContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMDefStatusExecutionContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDefStatusExecutionContext) UnmarshalBinary(b []byte) error {
	var res VMDefStatusExecutionContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
