// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DiskStorageConfig Disk Storage Configuration
//
// This preference specifies the storage configuration parameters for VM disks.
//
// swagger:model disk_storage_config
type DiskStorageConfig struct {

	// State of the storage policy to pin this virtual disk to the hot tier.
	// It overrides the VM preference when Flash Mode is enabled on the VM
	// of this virtual disk.
	//
	FlashMode FlashMode `json:"flash_mode,omitempty"`

	// This reference is for disk level storage container preference. This preference specifies the storage container to which this disk belongs.
	//
	StorageContainerReference *Reference `json:"storage_container_reference,omitempty"`
}

// Validate validates this disk storage config
func (m *DiskStorageConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlashMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageContainerReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskStorageConfig) validateFlashMode(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashMode) { // not required
		return nil
	}

	if err := m.FlashMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("flash_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("flash_mode")
		}
		return err
	}

	return nil
}

func (m *DiskStorageConfig) validateStorageContainerReference(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageContainerReference) { // not required
		return nil
	}

	if m.StorageContainerReference != nil {
		if err := m.StorageContainerReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_container_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_container_reference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this disk storage config based on the context it is used
func (m *DiskStorageConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlashMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageContainerReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskStorageConfig) contextValidateFlashMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.FlashMode) { // not required
		return nil
	}

	if err := m.FlashMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("flash_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("flash_mode")
		}
		return err
	}

	return nil
}

func (m *DiskStorageConfig) contextValidateStorageContainerReference(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageContainerReference != nil {

		if swag.IsZero(m.StorageContainerReference) { // not required
			return nil
		}

		if err := m.StorageContainerReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_container_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_container_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiskStorageConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskStorageConfig) UnmarshalBinary(b []byte) error {
	var res DiskStorageConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
