// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPProxyWhitelist HTTP Proxy Whitelist
//
// Exempt HTTP traffic to these targets, from going through the configured
// HTTP Proxy.
//
// swagger:model http_proxy_whitelist
type HTTPProxyWhitelist struct {

	// The target's identifier (as specified by the target_type). For eg:
	// "10.1.1.1" "www.google.com"
	//
	// Required: true
	Target *string `json:"target"`

	// Supplementing information for the "target" field, that describes how
	// to interpret it. For eg: If target is a IPv4 address such as
	// "10.1.1.1", target_type shold be "IPv4_ADDRESS". If target is a host
	// name such as "www.google.com", then target_type shoold be "HOST_NAME"
	//
	// Required: true
	TargetType *string `json:"target_type"`
}

// Validate validates this http proxy whitelist
func (m *HTTPProxyWhitelist) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPProxyWhitelist) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *HTTPProxyWhitelist) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("target_type", "body", m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http proxy whitelist based on context it is used
func (m *HTTPProxyWhitelist) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPProxyWhitelist) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPProxyWhitelist) UnmarshalBinary(b []byte) error {
	var res HTTPProxyWhitelist
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
