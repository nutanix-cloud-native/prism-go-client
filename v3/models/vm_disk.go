// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMDisk VirtualMachine Disk (VM Disk)
//
// VirtualMachine Disk (VM Disk).
//
// swagger:model vm_disk
type VMDisk struct {

	// data source reference
	DataSourceReference *VMDiskDataSourceReference `json:"data_source_reference,omitempty"`

	// device properties
	DeviceProperties *VMDiskDeviceProperties `json:"device_properties,omitempty"`

	// Size of the disk in Bytes.
	// Minimum: 1
	DiskSizeBytes int64 `json:"disk_size_bytes,omitempty"`

	// Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB -  when that field is present.
	//
	// Minimum: 1
	DiskSizeMib int32 `json:"disk_size_mib,omitempty"`

	// Storage configuration for disks.
	StorageConfig *DiskStorageConfig `json:"storage_config,omitempty"`

	// The device ID which is used to uniquely identify this particular disk.
	//
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	UUID string `json:"uuid,omitempty"`

	// volume group reference
	VolumeGroupReference *Reference `json:"volume_group_reference,omitempty"`
}

// Validate validates this vm disk
func (m *VMDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataSourceReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSizeBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSizeMib(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeGroupReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDisk) validateDataSourceReference(formats strfmt.Registry) error {
	if swag.IsZero(m.DataSourceReference) { // not required
		return nil
	}

	if m.DataSourceReference != nil {
		if err := m.DataSourceReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_source_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_source_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) validateDeviceProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceProperties) { // not required
		return nil
	}

	if m.DeviceProperties != nil {
		if err := m.DeviceProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_properties")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) validateDiskSizeBytes(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskSizeBytes) { // not required
		return nil
	}

	if err := validate.MinimumInt("disk_size_bytes", "body", m.DiskSizeBytes, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *VMDisk) validateDiskSizeMib(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskSizeMib) { // not required
		return nil
	}

	if err := validate.MinimumInt("disk_size_mib", "body", int64(m.DiskSizeMib), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *VMDisk) validateStorageConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageConfig) { // not required
		return nil
	}

	if m.StorageConfig != nil {
		if err := m.StorageConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.Pattern("uuid", "body", m.UUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *VMDisk) validateVolumeGroupReference(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeGroupReference) { // not required
		return nil
	}

	if m.VolumeGroupReference != nil {
		if err := m.VolumeGroupReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume_group_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volume_group_reference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vm disk based on the context it is used
func (m *VMDisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataSourceReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeGroupReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDisk) contextValidateDataSourceReference(ctx context.Context, formats strfmt.Registry) error {

	if m.DataSourceReference != nil {

		if swag.IsZero(m.DataSourceReference) { // not required
			return nil
		}

		if err := m.DataSourceReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_source_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_source_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) contextValidateDeviceProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceProperties != nil {

		if swag.IsZero(m.DeviceProperties) { // not required
			return nil
		}

		if err := m.DeviceProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_properties")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) contextValidateStorageConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageConfig != nil {

		if swag.IsZero(m.StorageConfig) { // not required
			return nil
		}

		if err := m.StorageConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) contextValidateVolumeGroupReference(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeGroupReference != nil {

		if swag.IsZero(m.VolumeGroupReference) { // not required
			return nil
		}

		if err := m.VolumeGroupReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume_group_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volume_group_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDisk) UnmarshalBinary(b []byte) error {
	var res VMDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMDiskDataSourceReference VM disk data source reference
//
// swagger:model VMDiskDataSourceReference
type VMDiskDataSourceReference struct {

	// This is to indicate if attaching the referenced disk directly. Important: this should only be used by internal services. Direct attaching a disk that is used by another VM will result in data loss.
	//
	IsDirectAttach bool `json:"is_direct_attach,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// AHV sync rep uses this field to identify a dormant VM disk.
	//
	// Pattern: ^((((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?)(#[\w\-]+)?$|(http[s]?:\/\/([\w\d\-_\.])((\/?\w+\.*)*(:[0-9]+)*\/?)))
	URL string `json:"url,omitempty"`

	// uuid
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this VM disk data source reference
func (m *VMDiskDataSourceReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskDataSourceReference) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.Pattern("data_source_reference"+"."+"url", "body", m.URL, `^((((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?)(#[\w\-]+)?$|(http[s]?:\/\/([\w\d\-_\.])((\/?\w+\.*)*(:[0-9]+)*\/?)))`); err != nil {
		return err
	}

	return nil
}

func (m *VMDiskDataSourceReference) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.Pattern("data_source_reference"+"."+"uuid", "body", m.UUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this VM disk data source reference based on the context it is used
func (m *VMDiskDataSourceReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskDataSourceReference) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "data_source_reference"+"."+"name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDiskDataSourceReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDiskDataSourceReference) UnmarshalBinary(b []byte) error {
	var res VMDiskDataSourceReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMDiskDeviceProperties VM disk device properties
//
// swagger:model VMDiskDeviceProperties
type VMDiskDeviceProperties struct {

	// device type
	DeviceType *string `json:"device_type,omitempty"`

	// disk address
	DiskAddress *DiskAddress `json:"disk_address,omitempty"`
}

// Validate validates this VM disk device properties
func (m *VMDiskDeviceProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskDeviceProperties) validateDiskAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskAddress) { // not required
		return nil
	}

	if m.DiskAddress != nil {
		if err := m.DiskAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_properties" + "." + "disk_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_properties" + "." + "disk_address")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this VM disk device properties based on the context it is used
func (m *VMDiskDeviceProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskDeviceProperties) contextValidateDiskAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskAddress != nil {

		if swag.IsZero(m.DiskAddress) { // not required
			return nil
		}

		if err := m.DiskAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_properties" + "." + "disk_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_properties" + "." + "disk_address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDiskDeviceProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDiskDeviceProperties) UnmarshalBinary(b []byte) error {
	var res VMDiskDeviceProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
