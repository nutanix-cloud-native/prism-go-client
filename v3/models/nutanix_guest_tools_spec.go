// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NutanixGuestToolsSpec Nutanix Guest Tools information
//
// Information regarding Nutanix Guest Tools.
//
// swagger:model nutanix_guest_tools_spec
type NutanixGuestToolsSpec struct {

	// Administrator Credentials of UVM. This is required for installing Nutanix Guest Tools on the UVM.
	//
	Credentials *Credentials `json:"credentials,omitempty"`

	// Application names that are enabled.
	EnabledCapabilityList []string `json:"enabled_capability_list"`

	// Desired mount state of Nutanix Guest Tools ISO.
	//
	IsoMountState string `json:"iso_mount_state,omitempty"`

	// Nutanix guest tools is installed or not.
	NgtState string `json:"ngt_state,omitempty"`

	// Nutanix Guest Tools is enabled or not.
	State string `json:"state,omitempty"`

	// Desired Version of Nutanix Guest Tools installed on the VM.
	Version string `json:"version,omitempty"`
}

// Validate validates this nutanix guest tools spec
func (m *NutanixGuestToolsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NutanixGuestToolsSpec) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nutanix guest tools spec based on the context it is used
func (m *NutanixGuestToolsSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NutanixGuestToolsSpec) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NutanixGuestToolsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NutanixGuestToolsSpec) UnmarshalBinary(b []byte) error {
	var res NutanixGuestToolsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
