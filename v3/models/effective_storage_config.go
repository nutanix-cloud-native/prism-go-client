// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EffectiveStorageConfig Effective storage configuration on the VM.
//
// Indicates the storage configuration attributes being effective on the VM.
// This state is resultant of storage attributes configured on the VM and
// storage policies associated with the VM.
//
// swagger:model effective_storage_config
type EffectiveStorageConfig struct {

	// List of storage policies active on the VM.
	ActiveStoragePolicyReferenceList []*Reference `json:"active_storage_policy_reference_list"`

	// Deprecated. Delay in seconds after which the VM disk data will be
	// compressed.
	//
	CompressionDelaySecs int32 `json:"compression_delay_secs,omitempty"`

	// Deprecated. Indicates whether compression is enabled or not on the VM.
	//
	CompressionEnabled bool `json:"compression_enabled,omitempty"`

	// Deprecated. Indicates whether encryption is enabled or not on the VM.
	//
	EncryptionEnabled bool `json:"encryption_enabled,omitempty"`

	// Deprecated. Max IOs the VM is allowed to do in a second.
	ThrottledIops int32 `json:"throttled_iops,omitempty"`
}

// Validate validates this effective storage config
func (m *EffectiveStorageConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveStoragePolicyReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EffectiveStorageConfig) validateActiveStoragePolicyReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveStoragePolicyReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveStoragePolicyReferenceList); i++ {
		if swag.IsZero(m.ActiveStoragePolicyReferenceList[i]) { // not required
			continue
		}

		if m.ActiveStoragePolicyReferenceList[i] != nil {
			if err := m.ActiveStoragePolicyReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active_storage_policy_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("active_storage_policy_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this effective storage config based on the context it is used
func (m *EffectiveStorageConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveStoragePolicyReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EffectiveStorageConfig) contextValidateActiveStoragePolicyReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActiveStoragePolicyReferenceList); i++ {

		if m.ActiveStoragePolicyReferenceList[i] != nil {

			if swag.IsZero(m.ActiveStoragePolicyReferenceList[i]) { // not required
				return nil
			}

			if err := m.ActiveStoragePolicyReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active_storage_policy_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("active_storage_policy_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EffectiveStorageConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EffectiveStorageConfig) UnmarshalBinary(b []byte) error {
	var res EffectiveStorageConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
