// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMBootConfig VM Boot configuration
//
// Indicates which device a VM should boot from.
//
// swagger:model vm_boot_config
type VMBootConfig struct {

	// Indicates which device a VM should boot from. Boot device takes precdence over boot device order. If both are given then specified boot device will be primary boot device and remaining devices will be assigned boot order according to boot device order field.
	//
	BootDevice *VMBootDevice `json:"boot_device,omitempty"`

	// Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
	//
	BootDeviceOrderList []string `json:"boot_device_order_list"`

	// Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or Secure boot is enabled then other legacy boot options (like boot_device and boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling Secure boot means that UEFI boot is also enabled.
	//
	BootType string `json:"boot_type,omitempty"`

	// data source reference
	DataSourceReference *Reference `json:"data_source_reference,omitempty"`
}

// Validate validates this vm boot config
func (m *VMBootConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSourceReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMBootConfig) validateBootDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.BootDevice) { // not required
		return nil
	}

	if m.BootDevice != nil {
		if err := m.BootDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boot_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boot_device")
			}
			return err
		}
	}

	return nil
}

func (m *VMBootConfig) validateDataSourceReference(formats strfmt.Registry) error {
	if swag.IsZero(m.DataSourceReference) { // not required
		return nil
	}

	if m.DataSourceReference != nil {
		if err := m.DataSourceReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_source_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_source_reference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vm boot config based on the context it is used
func (m *VMBootConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBootDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataSourceReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMBootConfig) contextValidateBootDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.BootDevice != nil {

		if swag.IsZero(m.BootDevice) { // not required
			return nil
		}

		if err := m.BootDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boot_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boot_device")
			}
			return err
		}
	}

	return nil
}

func (m *VMBootConfig) contextValidateDataSourceReference(ctx context.Context, formats strfmt.Registry) error {

	if m.DataSourceReference != nil {

		if swag.IsZero(m.DataSourceReference) { // not required
			return nil
		}

		if err := m.DataSourceReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_source_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_source_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMBootConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMBootConfig) UnmarshalBinary(b []byte) error {
	var res VMBootConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
