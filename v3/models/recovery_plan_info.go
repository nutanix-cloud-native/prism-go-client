// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryPlanInfo Recovery Plan information.
//
// Information about the state of the Recovery Plan.
//
// swagger:model recovery_plan_info
type RecoveryPlanInfo struct {

	// recoverability
	Recoverability *RecoveryPlanInfoRecoverability `json:"recoverability,omitempty"`
}

// Validate validates this recovery plan info
func (m *RecoveryPlanInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoverability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanInfo) validateRecoverability(formats strfmt.Registry) error {
	if swag.IsZero(m.Recoverability) { // not required
		return nil
	}

	if m.Recoverability != nil {
		if err := m.Recoverability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverability")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recovery plan info based on the context it is used
func (m *RecoveryPlanInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecoverability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanInfo) contextValidateRecoverability(ctx context.Context, formats strfmt.Registry) error {

	if m.Recoverability != nil {

		if swag.IsZero(m.Recoverability) { // not required
			return nil
		}

		if err := m.Recoverability.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverability")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanInfo) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RecoveryPlanInfoRecoverability Recoverability of the entity.
//
// swagger:model RecoveryPlanInfoRecoverability
type RecoveryPlanInfoRecoverability struct {

	// Reason for the status of the entity.
	// Max Length: 256
	Reason string `json:"reason,omitempty"`

	// Recoverability status of the entity.
	Status string `json:"status,omitempty"`
}

// Validate validates this recovery plan info recoverability
func (m *RecoveryPlanInfoRecoverability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanInfoRecoverability) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if err := validate.MaxLength("recoverability"+"."+"reason", "body", m.Reason, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recovery plan info recoverability based on context it is used
func (m *RecoveryPlanInfoRecoverability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanInfoRecoverability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanInfoRecoverability) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanInfoRecoverability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
