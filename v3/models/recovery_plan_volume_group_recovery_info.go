// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryPlanVolumeGroupRecoveryInfo Volume Groups recovery information.
//
// Information about Volume Groups to be recovered.
//
// swagger:model recovery_plan_volume_group_recovery_info
type RecoveryPlanVolumeGroupRecoveryInfo struct {

	// Categories for filtering Volume Groups.
	CategoryFilter *CategoryFilter `json:"category_filter,omitempty"`

	// List of configuration information for each Volume Group specified explicitly or in the category filter. Each entry in this list will contain reference to the Volume Group, authentication protocol and the target secret to be used for authenticating the Volume Group.
	//
	VolumeGroupConfigInfoList []*RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0 `json:"volume_group_config_info_list"`

	// Reference of the Volume Groups to be recovered.
	VolumeGroupReference *VolumeGroupReference `json:"volume_group_reference,omitempty"`
}

// Validate validates this recovery plan volume group recovery info
func (m *RecoveryPlanVolumeGroupRecoveryInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeGroupConfigInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeGroupReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfo) validateCategoryFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryFilter) { // not required
		return nil
	}

	if m.CategoryFilter != nil {
		if err := m.CategoryFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category_filter")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfo) validateVolumeGroupConfigInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeGroupConfigInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeGroupConfigInfoList); i++ {
		if swag.IsZero(m.VolumeGroupConfigInfoList[i]) { // not required
			continue
		}

		if m.VolumeGroupConfigInfoList[i] != nil {
			if err := m.VolumeGroupConfigInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volume_group_config_info_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volume_group_config_info_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfo) validateVolumeGroupReference(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeGroupReference) { // not required
		return nil
	}

	if m.VolumeGroupReference != nil {
		if err := m.VolumeGroupReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume_group_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volume_group_reference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recovery plan volume group recovery info based on the context it is used
func (m *RecoveryPlanVolumeGroupRecoveryInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategoryFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeGroupConfigInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeGroupReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfo) contextValidateCategoryFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.CategoryFilter != nil {

		if swag.IsZero(m.CategoryFilter) { // not required
			return nil
		}

		if err := m.CategoryFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category_filter")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfo) contextValidateVolumeGroupConfigInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeGroupConfigInfoList); i++ {

		if m.VolumeGroupConfigInfoList[i] != nil {

			if swag.IsZero(m.VolumeGroupConfigInfoList[i]) { // not required
				return nil
			}

			if err := m.VolumeGroupConfigInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volume_group_config_info_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volume_group_config_info_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfo) contextValidateVolumeGroupReference(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeGroupReference != nil {

		if swag.IsZero(m.VolumeGroupReference) { // not required
			return nil
		}

		if err := m.VolumeGroupReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume_group_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volume_group_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanVolumeGroupRecoveryInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanVolumeGroupRecoveryInfo) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanVolumeGroupRecoveryInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0 recovery plan volume group recovery info volume group config info list items0
//
// swagger:model RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0
type RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0 struct {

	// Type of authentication protocol to be used.
	AuthenticationType string `json:"authentication_type,omitempty"`

	// Authentication secret provided to iSCSI initiator for CHAP based authentication of the Volume Group.
	//
	// Max Length: 16
	// Min Length: 12
	// Format: password
	TargetSecret strfmt.Password `json:"target_secret,omitempty"`

	// Reference of the Volume Group.
	// Required: true
	VolumeGroupReference *VolumeGroupReference `json:"volume_group_reference"`
}

// Validate validates this recovery plan volume group recovery info volume group config info list items0
func (m *RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeGroupReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0) validateTargetSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetSecret) { // not required
		return nil
	}

	if err := validate.MinLength("target_secret", "body", m.TargetSecret.String(), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("target_secret", "body", m.TargetSecret.String(), 16); err != nil {
		return err
	}

	if err := validate.FormatOf("target_secret", "body", "password", m.TargetSecret.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0) validateVolumeGroupReference(formats strfmt.Registry) error {

	if err := validate.Required("volume_group_reference", "body", m.VolumeGroupReference); err != nil {
		return err
	}

	if m.VolumeGroupReference != nil {
		if err := m.VolumeGroupReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume_group_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volume_group_reference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recovery plan volume group recovery info volume group config info list items0 based on the context it is used
func (m *RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumeGroupReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0) contextValidateVolumeGroupReference(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeGroupReference != nil {

		if err := m.VolumeGroupReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume_group_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volume_group_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanVolumeGroupRecoveryInfoVolumeGroupConfigInfoListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
