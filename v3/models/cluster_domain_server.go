// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterDomainServer Domain Server
//
// Cluster domain server. Only applied to the cluster with all Hyper-V hosts.
//
// swagger:model cluster_domain_server
type ClusterDomainServer struct {

	// domain credentials
	DomainCredentials *Credentials `json:"domain_credentials,omitempty"`

	// Joined domain name. In 'put' request, empty name will unjoin the
	// cluster from current domain.
	//
	// Required: true
	Name *string `json:"name"`

	// The IP of the nameserver that can resolve the domain name. Must set
	// when joining the domain.
	//
	Nameserver string `json:"nameserver,omitempty"`
}

// Validate validates this cluster domain server
func (m *ClusterDomainServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDomainServer) validateDomainCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.DomainCredentials) { // not required
		return nil
	}

	if m.DomainCredentials != nil {
		if err := m.DomainCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain_credentials")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDomainServer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cluster domain server based on the context it is used
func (m *ClusterDomainServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomainCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDomainServer) contextValidateDomainCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.DomainCredentials != nil {

		if swag.IsZero(m.DomainCredentials) { // not required
			return nil
		}

		if err := m.DomainCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain_credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDomainServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDomainServer) UnmarshalBinary(b []byte) error {
	var res ClusterDomainServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
