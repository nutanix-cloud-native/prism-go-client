// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryPlanL2StretchConfig Configuration for creating Layer2 stretch for the subnet.
//
// Configuration for the Layer2 stretch of the subnet.
//
// swagger:model recovery_plan_l2_stretch_config
type RecoveryPlanL2StretchConfig struct {

	// local vtep gateway config
	// Required: true
	LocalVtepGatewayConfig *RecoveryPlanL2StretchConfigLocalVtepGatewayConfig `json:"local_vtep_gateway_config"`

	// VTEP Interface IP address on site for which subnet configuration is being specified.
	//
	// Required: true
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	LocalVtepInterfaceIPAddress *string `json:"local_vtep_interface_ip_address"`

	// Reference to the VTEP Gateway on site to which subnet is being stretched.
	//
	// Required: true
	RemoteVtepGatewayReference *VtepGatewayReference `json:"remote_vtep_gateway_reference"`

	// VTEP Interface IP address on site to which subnet is extended.
	//
	// Required: true
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	RemoteVtepInterfaceIPAddress *string `json:"remote_vtep_interface_ip_address"`
}

// Validate validates this recovery plan l2 stretch config
func (m *RecoveryPlanL2StretchConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalVtepGatewayConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalVtepInterfaceIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteVtepGatewayReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteVtepInterfaceIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanL2StretchConfig) validateLocalVtepGatewayConfig(formats strfmt.Registry) error {

	if err := validate.Required("local_vtep_gateway_config", "body", m.LocalVtepGatewayConfig); err != nil {
		return err
	}

	if m.LocalVtepGatewayConfig != nil {
		if err := m.LocalVtepGatewayConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local_vtep_gateway_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("local_vtep_gateway_config")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanL2StretchConfig) validateLocalVtepInterfaceIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("local_vtep_interface_ip_address", "body", m.LocalVtepInterfaceIPAddress); err != nil {
		return err
	}

	if err := validate.Pattern("local_vtep_interface_ip_address", "body", *m.LocalVtepInterfaceIPAddress, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanL2StretchConfig) validateRemoteVtepGatewayReference(formats strfmt.Registry) error {

	if err := validate.Required("remote_vtep_gateway_reference", "body", m.RemoteVtepGatewayReference); err != nil {
		return err
	}

	if m.RemoteVtepGatewayReference != nil {
		if err := m.RemoteVtepGatewayReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_vtep_gateway_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remote_vtep_gateway_reference")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanL2StretchConfig) validateRemoteVtepInterfaceIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("remote_vtep_interface_ip_address", "body", m.RemoteVtepInterfaceIPAddress); err != nil {
		return err
	}

	if err := validate.Pattern("remote_vtep_interface_ip_address", "body", *m.RemoteVtepInterfaceIPAddress, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recovery plan l2 stretch config based on the context it is used
func (m *RecoveryPlanL2StretchConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocalVtepGatewayConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteVtepGatewayReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanL2StretchConfig) contextValidateLocalVtepGatewayConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalVtepGatewayConfig != nil {

		if err := m.LocalVtepGatewayConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local_vtep_gateway_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("local_vtep_gateway_config")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanL2StretchConfig) contextValidateRemoteVtepGatewayReference(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteVtepGatewayReference != nil {

		if err := m.RemoteVtepGatewayReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_vtep_gateway_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remote_vtep_gateway_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanL2StretchConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanL2StretchConfig) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanL2StretchConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RecoveryPlanL2StretchConfigLocalVtepGatewayConfig VTEP Gateway configuration
//
// Configuration of the VTEP Gateway.
//
// swagger:model RecoveryPlanL2StretchConfigLocalVtepGatewayConfig
type RecoveryPlanL2StretchConfigLocalVtepGatewayConfig struct {

	// VTEP Gateway name.
	Name string `json:"name,omitempty"`
}

// Validate validates this recovery plan l2 stretch config local vtep gateway config
func (m *RecoveryPlanL2StretchConfigLocalVtepGatewayConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this recovery plan l2 stretch config local vtep gateway config based on context it is used
func (m *RecoveryPlanL2StretchConfigLocalVtepGatewayConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanL2StretchConfigLocalVtepGatewayConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanL2StretchConfigLocalVtepGatewayConfig) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanL2StretchConfigLocalVtepGatewayConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
