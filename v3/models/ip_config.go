// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPConfig IP config
//
// IP config.
//
// swagger:model ip_config
type IPConfig struct {

	// Default gateway IP address.
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	DefaultGatewayIP string `json:"default_gateway_ip,omitempty"`

	// dhcp options
	DhcpOptions *DhcpOptions `json:"dhcp_options,omitempty"`

	// dhcp server address
	DhcpServerAddress *Address `json:"dhcp_server_address,omitempty"`

	// pool list
	PoolList []*IPPool `json:"pool_list"`

	// prefix length
	PrefixLength int32 `json:"prefix_length,omitempty"`

	// Subnet IP address.
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	SubnetIP string `json:"subnet_ip,omitempty"`
}

// Validate validates this ip config
func (m *IPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultGatewayIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpServerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPConfig) validateDefaultGatewayIP(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultGatewayIP) { // not required
		return nil
	}

	if err := validate.Pattern("default_gateway_ip", "body", m.DefaultGatewayIP, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

func (m *IPConfig) validateDhcpOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpOptions) { // not required
		return nil
	}

	if m.DhcpOptions != nil {
		if err := m.DhcpOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_options")
			}
			return err
		}
	}

	return nil
}

func (m *IPConfig) validateDhcpServerAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpServerAddress) { // not required
		return nil
	}

	if m.DhcpServerAddress != nil {
		if err := m.DhcpServerAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_server_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_server_address")
			}
			return err
		}
	}

	return nil
}

func (m *IPConfig) validatePoolList(formats strfmt.Registry) error {
	if swag.IsZero(m.PoolList) { // not required
		return nil
	}

	for i := 0; i < len(m.PoolList); i++ {
		if swag.IsZero(m.PoolList[i]) { // not required
			continue
		}

		if m.PoolList[i] != nil {
			if err := m.PoolList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pool_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pool_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IPConfig) validateSubnetIP(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetIP) { // not required
		return nil
	}

	if err := validate.Pattern("subnet_ip", "body", m.SubnetIP, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ip config based on the context it is used
func (m *IPConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcpOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpServerAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoolList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPConfig) contextValidateDhcpOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpOptions != nil {

		if swag.IsZero(m.DhcpOptions) { // not required
			return nil
		}

		if err := m.DhcpOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_options")
			}
			return err
		}
	}

	return nil
}

func (m *IPConfig) contextValidateDhcpServerAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpServerAddress != nil {

		if swag.IsZero(m.DhcpServerAddress) { // not required
			return nil
		}

		if err := m.DhcpServerAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_server_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_server_address")
			}
			return err
		}
	}

	return nil
}

func (m *IPConfig) contextValidatePoolList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PoolList); i++ {

		if m.PoolList[i] != nil {

			if swag.IsZero(m.PoolList[i]) { // not required
				return nil
			}

			if err := m.PoolList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pool_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pool_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPConfig) UnmarshalBinary(b []byte) error {
	var res IPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
