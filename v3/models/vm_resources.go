// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMResources VM Resources
//
// VM Resources Definition.
//
// swagger:model vm_resources
type VMResources struct {

	// Information about Advanced Processor Comptability(APC) setting of VM.
	//
	ApcConfig *VMApcConfig `json:"apc_config,omitempty"`

	// Indicates the BIOS UUID of the VM.
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	BiosUUID string `json:"bios_uuid,omitempty"`

	// Indicates which device the VM should boot from.
	BootConfig *VMBootConfig `json:"boot_config,omitempty"`

	// Indicates whether to remove AHV branding from VM firmware tables.
	//
	DisableBranding bool `json:"disable_branding,omitempty"`

	// Disks attached to the VM.
	DiskList []*VMDisk `json:"disk_list"`

	// Indicates whether to passthrough the host's CPU features to the guest. Enabling this will disable live migration of the VM.
	//
	EnableCPUPassthrough bool `json:"enable_cpu_passthrough,omitempty"`

	// Indicates the Generation UUID of the VM.
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	GenerationUUID string `json:"generation_uuid,omitempty"`

	// Indicates whether vGPU console is enabled or not.
	GpuConsoleEnabled bool `json:"gpu_console_enabled,omitempty"`

	// GPUs attached to the VM.
	GpuList []*VMGpu `json:"gpu_list"`

	// guest customization
	GuestCustomization *GuestCustomization `json:"guest_customization,omitempty"`

	// String that identifies the OS running inside of the guest. Reserved for use by the system. Do not set or modify.
	// Max Length: 64
	GuestOsID string `json:"guest_os_id,omitempty"`

	// Information regarding guest tools.
	GuestTools *GuestToolsSpec `json:"guest_tools,omitempty"`

	// VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
	//
	// Max Length: 64
	HardwareClockTimezone string `json:"hardware_clock_timezone,omitempty"`

	// Indicates whether hardware assisted virtualization should be enabled for the Guest OS. Once enabled, the Guest OS has the ability to deploy a nested hypervisor.
	//
	HardwareVirtualizationEnabled bool `json:"hardware_virtualization_enabled,omitempty"`

	// Indicates whether the VM is an agent VM. When their host enters maintenance mode, after normal VMs are evacuated, agent VMs are powered off. When the host is restored, agent VMs are powered on before normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
	//
	IsAgentVM bool `json:"is_agent_vm,omitempty"`

	// Indicates whether the vCPUs should be hard pinned to specific pCPUs.
	IsVcpuHardPinned bool `json:"is_vcpu_hard_pinned,omitempty"`

	// Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
	//
	MachineType string `json:"machine_type,omitempty"`

	// Indicates whether memory overcommit feature should be enabled for the VM. If enabled, parts of the VM's memory may reside outside of the hypervisor physical memory. When enabled, it should be expected that the VM may suffer performance degradation.
	//
	MemoryOvercommitEnabled bool `json:"memory_overcommit_enabled,omitempty"`

	// Memory size in MiB.
	// Minimum: 1
	MemorySizeMib int32 `json:"memory_size_mib,omitempty"`

	// NICs attached to the VM.
	NicList []*VMNic `json:"nic_list"`

	// Number of vCPU sockets.
	// Minimum: 1
	NumSockets int32 `json:"num_sockets,omitempty"`

	// Number of logical threads per core.
	// Minimum: 1
	NumThreadsPerCore int32 `json:"num_threads_per_core,omitempty"`

	// Number of vCPUs per socket.
	// Minimum: 1
	NumVcpusPerSocket int32 `json:"num_vcpus_per_socket,omitempty"`

	// Reference to an entity that the VM should be cloned or created from.
	//
	ParentReference *Reference `json:"parent_reference,omitempty"`

	// The current or desired power state of the VM.
	PowerState string `json:"power_state,omitempty"`

	// power state mechanism
	PowerStateMechanism *VMPowerStateMechanism `json:"power_state_mechanism,omitempty"`

	// Serial ports configured on the VM.
	SerialPortList []*SerialPort `json:"serial_port_list"`

	// Storage configuration for AHV VMs.
	StorageConfig *VMStorageConfig `json:"storage_config,omitempty"`

	// Indicates whether VGA console should be enabled or not.
	VgaConsoleEnabled bool `json:"vga_console_enabled,omitempty"`

	// Information regarding vNUMA configuration.
	VnumaConfig *VMVnumaConfig `json:"vnuma_config,omitempty"`

	// VM vTPM configuration.
	VtpmConfig *VMVtpmConfig `json:"vtpm_config,omitempty"`
}

// Validate validates this vm resources
func (m *VMResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApcConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBiosUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerationUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestCustomization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestOsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestTools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareClockTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemorySizeMib(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumSockets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumThreadsPerCore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumVcpusPerSocket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerStateMechanism(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialPortList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVnumaConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVtpmConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMResources) validateApcConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ApcConfig) { // not required
		return nil
	}

	if m.ApcConfig != nil {
		if err := m.ApcConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apc_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apc_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) validateBiosUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.BiosUUID) { // not required
		return nil
	}

	if err := validate.Pattern("bios_uuid", "body", m.BiosUUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *VMResources) validateBootConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.BootConfig) { // not required
		return nil
	}

	if m.BootConfig != nil {
		if err := m.BootConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boot_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boot_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) validateDiskList(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskList) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskList); i++ {
		if swag.IsZero(m.DiskList[i]) { // not required
			continue
		}

		if m.DiskList[i] != nil {
			if err := m.DiskList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disk_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disk_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMResources) validateGenerationUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.GenerationUUID) { // not required
		return nil
	}

	if err := validate.Pattern("generation_uuid", "body", m.GenerationUUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *VMResources) validateGpuList(formats strfmt.Registry) error {
	if swag.IsZero(m.GpuList) { // not required
		return nil
	}

	for i := 0; i < len(m.GpuList); i++ {
		if swag.IsZero(m.GpuList[i]) { // not required
			continue
		}

		if m.GpuList[i] != nil {
			if err := m.GpuList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpu_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpu_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMResources) validateGuestCustomization(formats strfmt.Registry) error {
	if swag.IsZero(m.GuestCustomization) { // not required
		return nil
	}

	if m.GuestCustomization != nil {
		if err := m.GuestCustomization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_customization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guest_customization")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) validateGuestOsID(formats strfmt.Registry) error {
	if swag.IsZero(m.GuestOsID) { // not required
		return nil
	}

	if err := validate.MaxLength("guest_os_id", "body", m.GuestOsID, 64); err != nil {
		return err
	}

	return nil
}

func (m *VMResources) validateGuestTools(formats strfmt.Registry) error {
	if swag.IsZero(m.GuestTools) { // not required
		return nil
	}

	if m.GuestTools != nil {
		if err := m.GuestTools.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_tools")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guest_tools")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) validateHardwareClockTimezone(formats strfmt.Registry) error {
	if swag.IsZero(m.HardwareClockTimezone) { // not required
		return nil
	}

	if err := validate.MaxLength("hardware_clock_timezone", "body", m.HardwareClockTimezone, 64); err != nil {
		return err
	}

	return nil
}

func (m *VMResources) validateMemorySizeMib(formats strfmt.Registry) error {
	if swag.IsZero(m.MemorySizeMib) { // not required
		return nil
	}

	if err := validate.MinimumInt("memory_size_mib", "body", int64(m.MemorySizeMib), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *VMResources) validateNicList(formats strfmt.Registry) error {
	if swag.IsZero(m.NicList) { // not required
		return nil
	}

	for i := 0; i < len(m.NicList); i++ {
		if swag.IsZero(m.NicList[i]) { // not required
			continue
		}

		if m.NicList[i] != nil {
			if err := m.NicList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nic_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nic_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMResources) validateNumSockets(formats strfmt.Registry) error {
	if swag.IsZero(m.NumSockets) { // not required
		return nil
	}

	if err := validate.MinimumInt("num_sockets", "body", int64(m.NumSockets), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *VMResources) validateNumThreadsPerCore(formats strfmt.Registry) error {
	if swag.IsZero(m.NumThreadsPerCore) { // not required
		return nil
	}

	if err := validate.MinimumInt("num_threads_per_core", "body", int64(m.NumThreadsPerCore), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *VMResources) validateNumVcpusPerSocket(formats strfmt.Registry) error {
	if swag.IsZero(m.NumVcpusPerSocket) { // not required
		return nil
	}

	if err := validate.MinimumInt("num_vcpus_per_socket", "body", int64(m.NumVcpusPerSocket), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *VMResources) validateParentReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentReference) { // not required
		return nil
	}

	if m.ParentReference != nil {
		if err := m.ParentReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) validatePowerStateMechanism(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerStateMechanism) { // not required
		return nil
	}

	if m.PowerStateMechanism != nil {
		if err := m.PowerStateMechanism.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_state_mechanism")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_state_mechanism")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) validateSerialPortList(formats strfmt.Registry) error {
	if swag.IsZero(m.SerialPortList) { // not required
		return nil
	}

	for i := 0; i < len(m.SerialPortList); i++ {
		if swag.IsZero(m.SerialPortList[i]) { // not required
			continue
		}

		if m.SerialPortList[i] != nil {
			if err := m.SerialPortList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serial_port_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serial_port_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMResources) validateStorageConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageConfig) { // not required
		return nil
	}

	if m.StorageConfig != nil {
		if err := m.StorageConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) validateVnumaConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VnumaConfig) { // not required
		return nil
	}

	if m.VnumaConfig != nil {
		if err := m.VnumaConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vnuma_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vnuma_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) validateVtpmConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VtpmConfig) { // not required
		return nil
	}

	if m.VtpmConfig != nil {
		if err := m.VtpmConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vtpm_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vtpm_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vm resources based on the context it is used
func (m *VMResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApcConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBootConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiskList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpuList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuestCustomization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuestTools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerStateMechanism(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSerialPortList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVnumaConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVtpmConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMResources) contextValidateApcConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ApcConfig != nil {

		if swag.IsZero(m.ApcConfig) { // not required
			return nil
		}

		if err := m.ApcConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apc_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apc_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) contextValidateBootConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.BootConfig != nil {

		if swag.IsZero(m.BootConfig) { // not required
			return nil
		}

		if err := m.BootConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boot_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boot_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) contextValidateDiskList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskList); i++ {

		if m.DiskList[i] != nil {

			if swag.IsZero(m.DiskList[i]) { // not required
				return nil
			}

			if err := m.DiskList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disk_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disk_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMResources) contextValidateGpuList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GpuList); i++ {

		if m.GpuList[i] != nil {

			if swag.IsZero(m.GpuList[i]) { // not required
				return nil
			}

			if err := m.GpuList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpu_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpu_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMResources) contextValidateGuestCustomization(ctx context.Context, formats strfmt.Registry) error {

	if m.GuestCustomization != nil {

		if swag.IsZero(m.GuestCustomization) { // not required
			return nil
		}

		if err := m.GuestCustomization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_customization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guest_customization")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) contextValidateGuestTools(ctx context.Context, formats strfmt.Registry) error {

	if m.GuestTools != nil {

		if swag.IsZero(m.GuestTools) { // not required
			return nil
		}

		if err := m.GuestTools.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_tools")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guest_tools")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) contextValidateNicList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NicList); i++ {

		if m.NicList[i] != nil {

			if swag.IsZero(m.NicList[i]) { // not required
				return nil
			}

			if err := m.NicList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nic_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nic_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMResources) contextValidateParentReference(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentReference != nil {

		if swag.IsZero(m.ParentReference) { // not required
			return nil
		}

		if err := m.ParentReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_reference")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) contextValidatePowerStateMechanism(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerStateMechanism != nil {

		if swag.IsZero(m.PowerStateMechanism) { // not required
			return nil
		}

		if err := m.PowerStateMechanism.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_state_mechanism")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_state_mechanism")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) contextValidateSerialPortList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SerialPortList); i++ {

		if m.SerialPortList[i] != nil {

			if swag.IsZero(m.SerialPortList[i]) { // not required
				return nil
			}

			if err := m.SerialPortList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serial_port_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serial_port_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMResources) contextValidateStorageConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageConfig != nil {

		if swag.IsZero(m.StorageConfig) { // not required
			return nil
		}

		if err := m.StorageConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) contextValidateVnumaConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VnumaConfig != nil {

		if swag.IsZero(m.VnumaConfig) { // not required
			return nil
		}

		if err := m.VnumaConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vnuma_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vnuma_config")
			}
			return err
		}
	}

	return nil
}

func (m *VMResources) contextValidateVtpmConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VtpmConfig != nil {

		if swag.IsZero(m.VtpmConfig) { // not required
			return nil
		}

		if err := m.VtpmConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vtpm_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vtpm_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMResources) UnmarshalBinary(b []byte) error {
	var res VMResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
