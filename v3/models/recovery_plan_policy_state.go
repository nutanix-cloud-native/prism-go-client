// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryPlanPolicyState Policy State
//
// State of enforced policy on an entity.
//
// swagger:model recovery_plan_policy_state
type RecoveryPlanPolicyState struct {

	// This field indicates whether the given entity is compliant with the specified policy or not. It will be in unknown state if the current compliance state is not known.
	//
	// Required: true
	ComplianceStatus *PolicyComplianceState `json:"compliance_status"`

	// Policy enforcement mode informs us about what the policy engine is currently doing to enforce the policy on the entity. Monitoring indicates that the policy engine is simply monitoring the entity's state. Enforcing means that the policy engine is currently trying to enforce the policy on the entity. Enforcement failed indicates that the policy engine encountered a non-transient error and requires user intervention to fix the problem, error message gives the reason for error in this case.
	//
	// Required: true
	EnforcementMode *string `json:"enforcement_mode"`

	// error message list
	ErrorMessageList []*MessageResource `json:"error_message_list"`

	// policy info
	PolicyInfo *RecoveryPlanInfo `json:"policy_info,omitempty"`

	// policy reference
	// Required: true
	PolicyReference *Reference `json:"policy_reference"`
}

// Validate validates this recovery plan policy state
func (m *RecoveryPlanPolicyState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComplianceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcementMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorMessageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanPolicyState) validateComplianceStatus(formats strfmt.Registry) error {

	if err := validate.Required("compliance_status", "body", m.ComplianceStatus); err != nil {
		return err
	}

	if err := validate.Required("compliance_status", "body", m.ComplianceStatus); err != nil {
		return err
	}

	if m.ComplianceStatus != nil {
		if err := m.ComplianceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compliance_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compliance_status")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanPolicyState) validateEnforcementMode(formats strfmt.Registry) error {

	if err := validate.Required("enforcement_mode", "body", m.EnforcementMode); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanPolicyState) validateErrorMessageList(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorMessageList) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorMessageList); i++ {
		if swag.IsZero(m.ErrorMessageList[i]) { // not required
			continue
		}

		if m.ErrorMessageList[i] != nil {
			if err := m.ErrorMessageList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("error_message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("error_message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoveryPlanPolicyState) validatePolicyInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyInfo) { // not required
		return nil
	}

	if m.PolicyInfo != nil {
		if err := m.PolicyInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_info")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanPolicyState) validatePolicyReference(formats strfmt.Registry) error {

	if err := validate.Required("policy_reference", "body", m.PolicyReference); err != nil {
		return err
	}

	if m.PolicyReference != nil {
		if err := m.PolicyReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_reference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recovery plan policy state based on the context it is used
func (m *RecoveryPlanPolicyState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComplianceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorMessageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanPolicyState) contextValidateComplianceStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ComplianceStatus != nil {

		if err := m.ComplianceStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compliance_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compliance_status")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanPolicyState) contextValidateErrorMessageList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ErrorMessageList); i++ {

		if m.ErrorMessageList[i] != nil {

			if swag.IsZero(m.ErrorMessageList[i]) { // not required
				return nil
			}

			if err := m.ErrorMessageList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("error_message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("error_message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoveryPlanPolicyState) contextValidatePolicyInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyInfo != nil {

		if swag.IsZero(m.PolicyInfo) { // not required
			return nil
		}

		if err := m.PolicyInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_info")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryPlanPolicyState) contextValidatePolicyReference(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyReference != nil {

		if err := m.PolicyReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanPolicyState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanPolicyState) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanPolicyState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
