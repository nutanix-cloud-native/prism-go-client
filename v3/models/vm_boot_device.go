// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMBootDevice VM Boot device
//
// Indicates which device a VM should boot from. One of disk_address or mac_address should be provided.
//
// swagger:model vm_boot_device
type VMBootDevice struct {

	// Address of disk to boot from.
	DiskAddress *DiskAddress `json:"disk_address,omitempty"`

	// MAC address of nic to boot from.
	// Pattern: ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
	MacAddress string `json:"mac_address,omitempty"`
}

// Validate validates this vm boot device
func (m *VMBootDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMBootDevice) validateDiskAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskAddress) { // not required
		return nil
	}

	if m.DiskAddress != nil {
		if err := m.DiskAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk_address")
			}
			return err
		}
	}

	return nil
}

func (m *VMBootDevice) validateMacAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.MacAddress) { // not required
		return nil
	}

	if err := validate.Pattern("mac_address", "body", m.MacAddress, `^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vm boot device based on the context it is used
func (m *VMBootDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMBootDevice) contextValidateDiskAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskAddress != nil {

		if swag.IsZero(m.DiskAddress) { // not required
			return nil
		}

		if err := m.DiskAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk_address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMBootDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMBootDevice) UnmarshalBinary(b []byte) error {
	var res VMBootDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
