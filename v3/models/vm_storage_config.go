// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMStorageConfig VM Storage Config input
//
// User inputs of storage configuration parameters for VMs.
//
// swagger:model vm_storage_config
type VMStorageConfig struct {

	// State of the storage policy to pin virtual disks of the VM to the
	// hot tier.
	//
	FlashMode FlashMode `json:"flash_mode,omitempty"`

	// Storage QoS parameters to be applied on the VM.
	// The parameters are reset if the default values are passed.
	//
	QosPolicy *StorageQosPolicyConfigInput `json:"qos_policy,omitempty"`
}

// Validate validates this vm storage config
func (m *VMStorageConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlashMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMStorageConfig) validateFlashMode(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashMode) { // not required
		return nil
	}

	if err := m.FlashMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("flash_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("flash_mode")
		}
		return err
	}

	return nil
}

func (m *VMStorageConfig) validateQosPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.QosPolicy) { // not required
		return nil
	}

	if m.QosPolicy != nil {
		if err := m.QosPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_policy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vm storage config based on the context it is used
func (m *VMStorageConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlashMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQosPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMStorageConfig) contextValidateFlashMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.FlashMode) { // not required
		return nil
	}

	if err := m.FlashMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("flash_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("flash_mode")
		}
		return err
	}

	return nil
}

func (m *VMStorageConfig) contextValidateQosPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.QosPolicy != nil {

		if swag.IsZero(m.QosPolicy) { // not required
			return nil
		}

		if err := m.QosPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMStorageConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMStorageConfig) UnmarshalBinary(b []byte) error {
	var res VMStorageConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
