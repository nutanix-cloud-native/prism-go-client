// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMGpuOutputStatus Virtual Machine GPU status
//
// Graphics resource status information for the Virtual Machine.
//
// swagger:model vm_gpu_output_status
type VMGpuOutputStatus struct {

	// The device ID of the GPU.
	DeviceID int32 `json:"device_id,omitempty"`

	// Fraction of the physical GPU assigned.
	Fraction int32 `json:"fraction,omitempty"`

	// GPU frame buffer size in MiB.
	FrameBufferSizeMib int64 `json:"frame_buffer_size_mib,omitempty"`

	// Last determined guest driver version.
	GuestDriverVersion string `json:"guest_driver_version,omitempty"`

	// Maximum number of vGPUs of a GPU type assignable to a VM.
	MaxInstancesPerVM int64 `json:"max_instances_per_vm,omitempty"`

	// The mode of this GPU
	Mode string `json:"mode,omitempty"`

	// Name of the GPU resource.
	Name string `json:"name,omitempty"`

	// Number of supported virtual display heads.
	NumVirtualDisplayHeads int32 `json:"num_virtual_display_heads,omitempty"`

	// GPU {segment:bus:device:function} (sbdf) address if assigned.
	//
	PciAddress string `json:"pci_address,omitempty"`

	// UUID of the GPU.
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	UUID string `json:"uuid,omitempty"`

	// The vendor of the GPU.
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this vm gpu output status
func (m *VMGpuOutputStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMGpuOutputStatus) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.Pattern("uuid", "body", m.UUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vm gpu output status based on context it is used
func (m *VMGpuOutputStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMGpuOutputStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMGpuOutputStatus) UnmarshalBinary(b []byte) error {
	var res VMGpuOutputStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
