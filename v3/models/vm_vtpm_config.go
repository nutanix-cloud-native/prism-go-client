// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMVtpmConfig VM vTPM configuration.
//
// Indicates how VM vTPM should be configured.
//
// swagger:model vm_vtpm_config
type VMVtpmConfig struct {

	// data source reference
	DataSourceReference *Reference `json:"data_source_reference,omitempty"`

	// Indicates whether virtual trusted platform module should be enabled for the Guest OS.
	//
	VtpmEnabled bool `json:"vtpm_enabled,omitempty"`

	// Virtual trusted platform module secret.
	VtpmSecret string `json:"vtpm_secret,omitempty"`
}

// Validate validates this vm vtpm config
func (m *VMVtpmConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataSourceReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMVtpmConfig) validateDataSourceReference(formats strfmt.Registry) error {
	if swag.IsZero(m.DataSourceReference) { // not required
		return nil
	}

	if m.DataSourceReference != nil {
		if err := m.DataSourceReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_source_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_source_reference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vm vtpm config based on the context it is used
func (m *VMVtpmConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataSourceReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMVtpmConfig) contextValidateDataSourceReference(ctx context.Context, formats strfmt.Registry) error {

	if m.DataSourceReference != nil {

		if swag.IsZero(m.DataSourceReference) { // not required
			return nil
		}

		if err := m.DataSourceReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_source_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_source_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMVtpmConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMVtpmConfig) UnmarshalBinary(b []byte) error {
	var res VMVtpmConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
