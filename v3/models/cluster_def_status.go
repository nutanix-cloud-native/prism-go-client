// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterDefStatus Cluster Status
//
// Cluster status definition.  A Nutanix cluster is comprised of three or
// more Nutanix nodes. Each node in the cluster contains memory, CPU, RAM,
// and storage (SSD/HDD). Each node in the cluster runs standard hypervisor
// such as VMware vSphere, Microsoft Hyper-V, or AHV. A Controller VM (CVM)
// runs on each node in the cluster. The CVM enables each node to share
// local storage from all nodes in the cluster.
//
// swagger:model cluster_def_status
type ClusterDefStatus struct {

	// message list
	MessageList []*MessageResource `json:"message_list"`

	// Cluster Name.
	Name string `json:"name,omitempty"`

	// resources
	// Required: true
	Resources *ClusterDefStatusResources `json:"resources"`

	// The state of the cluster entity.
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this cluster def status
func (m *ClusterDefStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDefStatus) validateMessageList(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageList) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageList); i++ {
		if swag.IsZero(m.MessageList[i]) { // not required
			continue
		}

		if m.MessageList[i] != nil {
			if err := m.MessageList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterDefStatus) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster def status based on the context it is used
func (m *ClusterDefStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDefStatus) contextValidateMessageList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MessageList); i++ {

		if m.MessageList[i] != nil {

			if swag.IsZero(m.MessageList[i]) { // not required
				return nil
			}

			if err := m.MessageList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("message_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("message_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterDefStatus) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDefStatus) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDefStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDefStatus) UnmarshalBinary(b []byte) error {
	var res ClusterDefStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterDefStatusResources Cluster resources.
//
// swagger:model ClusterDefStatusResources
type ClusterDefStatusResources struct {

	// analysis
	Analysis *ClusterAnalysis `json:"analysis,omitempty"`

	// config
	// Required: true
	Config *ClusterConfig `json:"config"`

	// network
	// Required: true
	Network *ClusterNetwork `json:"network"`

	// nodes
	Nodes *ClusterNodes `json:"nodes,omitempty"`

	// Cluster current attributes and onging operations.
	RuntimeStatusList []string `json:"runtime_status_list"`
}

// Validate validates this cluster def status resources
func (m *ClusterDefStatusResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDefStatusResources) validateAnalysis(formats strfmt.Registry) error {
	if swag.IsZero(m.Analysis) { // not required
		return nil
	}

	if m.Analysis != nil {
		if err := m.Analysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "analysis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "analysis")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDefStatusResources) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "config")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDefStatusResources) validateNetwork(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"network", "body", m.Network); err != nil {
		return err
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "network")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDefStatusResources) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	if m.Nodes != nil {
		if err := m.Nodes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "nodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "nodes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster def status resources based on the context it is used
func (m *ClusterDefStatusResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnalysis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDefStatusResources) contextValidateAnalysis(ctx context.Context, formats strfmt.Registry) error {

	if m.Analysis != nil {

		if swag.IsZero(m.Analysis) { // not required
			return nil
		}

		if err := m.Analysis.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "analysis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "analysis")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDefStatusResources) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "config")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDefStatusResources) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {

		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "network")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDefStatusResources) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	if m.Nodes != nil {

		if swag.IsZero(m.Nodes) { // not required
			return nil
		}

		if err := m.Nodes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "nodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "nodes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDefStatusResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDefStatusResources) UnmarshalBinary(b []byte) error {
	var res ClusterDefStatusResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
