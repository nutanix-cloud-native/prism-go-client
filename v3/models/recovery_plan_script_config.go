// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryPlanScriptConfig Script configuration
//
// Configuration of the script to be executed inside the guest VM after recovery. The script is expected to be present at following file path as per Operating System: - Production:
//   - Windows : scripts/production/vm_recovery.bat relative to the Nutanix
//     directory in the Program Files
//   - Linux : /usr/local/sbin/production_vm_recovery
//
// - Test:
//   - Windows : scripts/test/vm_recovery.bat relative to the Nutanix
//     directory in the Program Files
//   - Linux : /usr/local/sbin/test_vm_recovery
//
// swagger:model recovery_plan_script_config
type RecoveryPlanScriptConfig struct {

	// Indicates whether to execute script.
	//
	// Required: true
	EnableScriptExec *bool `json:"enable_script_exec"`

	// The timeout for the script (seconds).
	//
	// Minimum: 0
	Timeout *int32 `json:"timeout,omitempty"`
}

// Validate validates this recovery plan script config
func (m *RecoveryPlanScriptConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableScriptExec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryPlanScriptConfig) validateEnableScriptExec(formats strfmt.Registry) error {

	if err := validate.Required("enable_script_exec", "body", m.EnableScriptExec); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryPlanScriptConfig) validateTimeout(formats strfmt.Registry) error {
	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("timeout", "body", int64(*m.Timeout), 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recovery plan script config based on context it is used
func (m *RecoveryPlanScriptConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPlanScriptConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPlanScriptConfig) UnmarshalBinary(b []byte) error {
	var res RecoveryPlanScriptConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
