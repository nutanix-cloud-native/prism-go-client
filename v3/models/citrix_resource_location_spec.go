// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CitrixResourceLocationSpec Citrix Resource Location.
//
// Resource Location on Citrix Cloud.
//
// swagger:model citrix_resource_location_spec
type CitrixResourceLocationSpec struct {

	// The resource location id.
	// Max Length: 200
	ID string `json:"id,omitempty"`

	// The resource location name.
	// Max Length: 200
	Name string `json:"name,omitempty"`
}

// Validate validates this citrix resource location spec
func (m *CitrixResourceLocationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CitrixResourceLocationSpec) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", m.ID, 200); err != nil {
		return err
	}

	return nil
}

func (m *CitrixResourceLocationSpec) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 200); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this citrix resource location spec based on context it is used
func (m *CitrixResourceLocationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CitrixResourceLocationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CitrixResourceLocationSpec) UnmarshalBinary(b []byte) error {
	var res CitrixResourceLocationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
