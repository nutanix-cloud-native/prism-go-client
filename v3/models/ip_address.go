// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPAddress IP Address
//
// An IP address.
//
// swagger:model ip_address
type IPAddress struct {

	// Gateway IP addresses matching the subnet.
	GatewayAddressList []string `json:"gateway_address_list"`

	// Address string.
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	IP string `json:"ip,omitempty"`

	// Indicates whether IP address is DHCP or Static.
	IPType string `json:"ip_type,omitempty"`

	// Prefix length for the IP address.
	// Maximum: 32
	// Minimum: 0
	PrefixLength *int32 `json:"prefix_length,omitempty"`

	// Address type. It can only be "ASSIGNED" in the spec. If no type is
	// specified in the spec, the default type is set to "ASSIGNED".
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this ip address
func (m *IPAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGatewayAddressList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefixLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAddress) validateGatewayAddressList(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayAddressList) { // not required
		return nil
	}

	for i := 0; i < len(m.GatewayAddressList); i++ {

		if err := validate.Pattern("gateway_address_list"+"."+strconv.Itoa(i), "body", m.GatewayAddressList[i], `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *IPAddress) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(m.IP) { // not required
		return nil
	}

	if err := validate.Pattern("ip", "body", m.IP, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

func (m *IPAddress) validatePrefixLength(formats strfmt.Registry) error {
	if swag.IsZero(m.PrefixLength) { // not required
		return nil
	}

	if err := validate.MinimumInt("prefix_length", "body", int64(*m.PrefixLength), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("prefix_length", "body", int64(*m.PrefixLength), 32, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ip address based on context it is used
func (m *IPAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IPAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAddress) UnmarshalBinary(b []byte) error {
	var res IPAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
