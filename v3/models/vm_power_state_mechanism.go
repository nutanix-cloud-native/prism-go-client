// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMPowerStateMechanism VM Power State Mechanism
//
// Indicates the mechanism guiding the VM power state transition. Currently used for the transition to "OFF" state.
//
// swagger:model vm_power_state_mechanism
type VMPowerStateMechanism struct {

	// guest transition config
	GuestTransitionConfig *VMGuestPowerStateTransitionConfig `json:"guest_transition_config,omitempty"`

	// Power state mechanism (ACPI/GUEST/HARD).
	Mechanism string `json:"mechanism,omitempty"`
}

// Validate validates this vm power state mechanism
func (m *VMPowerStateMechanism) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGuestTransitionConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMPowerStateMechanism) validateGuestTransitionConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.GuestTransitionConfig) { // not required
		return nil
	}

	if m.GuestTransitionConfig != nil {
		if err := m.GuestTransitionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_transition_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guest_transition_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vm power state mechanism based on the context it is used
func (m *VMPowerStateMechanism) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuestTransitionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMPowerStateMechanism) contextValidateGuestTransitionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.GuestTransitionConfig != nil {

		if swag.IsZero(m.GuestTransitionConfig) { // not required
			return nil
		}

		if err := m.GuestTransitionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_transition_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guest_transition_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMPowerStateMechanism) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMPowerStateMechanism) UnmarshalBinary(b []byte) error {
	var res VMPowerStateMechanism
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
