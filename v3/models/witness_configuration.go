// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WitnessConfiguration Witness Configuration.
//
// Witness configuration to be stored in Recovery Plan.
//
// swagger:model witness_configuration
type WitnessConfiguration struct {

	// Address of the witness, which will be witnessing this Recovery Plan. This will be same as Availability Zone URL, on which witness is deployed.
	//
	WitnessAddress string `json:"witness_address,omitempty"`

	// Time in seconds after which witness will trigger failover on this Recovery Plan in case there is a failure of source cluster or pause replication for entities in case there is a failure of target cluster.
	//
	// Minimum: 1
	WitnessFailoverTimeoutSecs int32 `json:"witness_failover_timeout_secs,omitempty"`
}

// Validate validates this witness configuration
func (m *WitnessConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWitnessFailoverTimeoutSecs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WitnessConfiguration) validateWitnessFailoverTimeoutSecs(formats strfmt.Registry) error {
	if swag.IsZero(m.WitnessFailoverTimeoutSecs) { // not required
		return nil
	}

	if err := validate.MinimumInt("witness_failover_timeout_secs", "body", int64(m.WitnessFailoverTimeoutSecs), 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this witness configuration based on context it is used
func (m *WitnessConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WitnessConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WitnessConfiguration) UnmarshalBinary(b []byte) error {
	var res WitnessConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
