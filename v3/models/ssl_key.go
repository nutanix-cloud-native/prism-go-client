// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SslKey SSL certificate
//
// SSL certificate.
//
// swagger:model ssl_key
type SslKey struct {

	// UTC date and time in RFC-3339 format when the key expires
	// Format: date-time
	ExpireDatetime strfmt.DateTime `json:"expire_datetime,omitempty"`

	// key name
	KeyName string `json:"key_name,omitempty"`

	// key type
	// Required: true
	KeyType *SslKeyType `json:"key_type"`

	// signing info
	SigningInfo *CertificationSigningInfo `json:"signing_info,omitempty"`
}

// Validate validates this ssl key
func (m *SslKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpireDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSigningInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SslKey) validateExpireDatetime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpireDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("expire_datetime", "body", "date-time", m.ExpireDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SslKey) validateKeyType(formats strfmt.Registry) error {

	if err := validate.Required("key_type", "body", m.KeyType); err != nil {
		return err
	}

	if err := validate.Required("key_type", "body", m.KeyType); err != nil {
		return err
	}

	if m.KeyType != nil {
		if err := m.KeyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("key_type")
			}
			return err
		}
	}

	return nil
}

func (m *SslKey) validateSigningInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SigningInfo) { // not required
		return nil
	}

	if m.SigningInfo != nil {
		if err := m.SigningInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signing_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signing_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ssl key based on the context it is used
func (m *SslKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSigningInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SslKey) contextValidateKeyType(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyType != nil {

		if err := m.KeyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("key_type")
			}
			return err
		}
	}

	return nil
}

func (m *SslKey) contextValidateSigningInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SigningInfo != nil {

		if swag.IsZero(m.SigningInfo) { // not required
			return nil
		}

		if err := m.SigningInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signing_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signing_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SslKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SslKey) UnmarshalBinary(b []byte) error {
	var res SslKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
